@use 'sass:math';
@use 'sass:list';
@use 'base';

$color_list: (#4285f4, #ea4335, #c19205, #a742f4, #34a853);

$theme-color: #07bdfa;

$numbers: (1, 2, 3, 4, 5, 6, 7, 8, 9);

@mixin shadow-box($theme: darkgray) {
  background: $theme;
  box-shadow: 5px 5px 1px rgba($theme, 0.25);
  color: #fff;
  margin: 1rem 0;
  padding: 0.5rem;
  border-radius: 0.5rem;
  font-size: 1.2rem;
  line-height: 2rem;
}

@mixin corner-icon($name, $top-or-bottom, $left-or-right) {
  .icon-#{$name} {
    background-image: url('/images/#{$name}.png');
    // position: absolute;
    width: 50px;
    height: 50px;
    background-repeat: no-repeat;
    background-size: cover;
    margin-left: 1rem;
    // #{$top-or-bottom}: 0;
    // #{$left-or-right}: 0;
  }
}

.container {
  width: 100%;
  min-height: 100vh;
  display: grid;
  //   grid-template-columns: 200px 1fr 100px;
  //   grid-template-rows: 80px 1fr 2rem 150px;

  grid-template:
    'header header header' 80px
    'aside-left main aside-right' 1fr
    '. . .' 2rem
    'footer footer footer' 150px
    / 100px 1fr 50px;
}

h3 {
  color: #4285f4;
  text-shadow: 2px 2px 1px rgba(101, 105, 105, 0.5);
}

header {
  grid-area: header;
  display: flex;
  flex-direction: column;
  justify-content: center;
  background-color: darkcyan;
  @include corner-icon('male', top, left);
}

.left-menubar {
  grid-area: aside-left;
  background-color: darkkhaki;
}

.menu-group {
  // 리스트 길이만큼 순회
  @for $i from 1 through list.length($color_list) {
    li:nth-child(#{$i}) {
      color: list.nth($color_list, $i);
      margin: 1em;
    }
  }
  list-style-type: none;
}

main {
  position: relative;
  width: 100%;
  padding: 0.5rem;
  grid-area: main;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background-color: rgb(246, 242, 234);
}
.right-menubar {
  grid-area: aside-right;
  background-color: lightblue;
  padding: 1rem;

  @for $i from 1 to 11 {
    p:nth-child(#{$i}) {
      &::before {
        content: '#{$i}';
      }
      margin-bottom: 1rem;
    }
  }
}

footer {
  grid-area: footer;
  background-color: darkgray;
}

/*
  ! Transition !

  - transition
    * transition: property duration function delay
                  all      0        ease     0     (기본값)
  - transition-property
  - transition-duration
  - transition-timing-function
  - transition-delay : 트랜지션 시작전 대기 시간

  - ease : 기본값, 느리게 시작하여 점점 빨라졌다가 느려지면서 종료
  - linear : 시작 부터 종료까지 등속 운동
  - ease-in : 느리게 시작한 후 일정한 속도에 다다르면 그 상태로 등속 운동한다.
  - ease-out : 일정한 속도의 등속으로 시작해서 점점 느려지면서종료
  - ease-in-out : ease 와 비슷하게 느리게 시작하여 느려지면서 종료

*/

div.transition-demo {
  width: 100px;
  height: 50px;
  border-radius: 1rem;
  background-color: #ea4335;
  cursor: pointer;
  transition-property: width, background-color;
  transition-duration: 2s, 2s;
  transition-delay: 0.3s;
  transition-timing-function: ease-out;

  &:hover {
    width: 400px;
    background-color: #4285f4;
  }
}

/*
  ! transform !

  - translate 이동 :
  - rotate 회전
  - scale 확대/축소 :
  - 비틀기 skew :

  - translate(x, y) : X, Y 축으로 이동
  - translateX(n) : X 축으로 이동
  - translateY(n) : Y 축으로 이동
  - scale(x, y) : X, Y 축으로 확대 축소
  - scaleX(n) :
  - scaleY(n) :
  - skew(x-angle, y-angle) : X, Y 각도 만큼 기울임
  - skeyX(x-angle)
  - skeyY(y-angle)
  - rotate(angle) : 요소를 angle 만큼 회전 시킴
*/

$width: 100px;
$height: 50px;
$color1: #ba4a4a;

.box .translate {
  width: $width;
  height: $height;
  background-color: $color1;
  color: white;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 0.3rem;
  &:hover {
    // transform: translate(5px, 5px) delay(1s);
    // transform: translateX(50px) scale(1.25);
    // transform: skew(10deg, 10deg);
    // transform: rotate(45deg);
    // transform: scale(0.5);
    // transition: transform 1.5s ease-in-out;

    transition-property: transform, opacity;
    transition-duration: 1.5s;
    transition-timing-function: linear;
    transform: scale(1.5) rotate(360deg);
    transform-origin: 80% 80%;
    opacity: 0.5;
  }
}

/*
  ! 전환 (Transition) vs 애미메이션 (Animation) !

  - Transition : 시작과 종료만 고려

  - Animation : 시작과 종료 + 중간 상태 고려

  * from - to *
  @keyframes {
    from {}
    to {}
  }

  * percentage *
  @keyframes {
    0% {}
    50% {}
    100% {}
  }

  --> animation: 이름 지속시간 대기시간? 타이밍함수? 반복횟수? 반복방향? 전후상태? 재생/정지?;
  - animation-name : @keyframes 의 이름, none
  - animation-duration : 지속시간, 0s
  - animation-delay : 대기시간, 0s
  - animation-timing-function : 타이밍 함수, ease
    + linear : 일정하게
    + ease : 기본값, 빠르게 - 느리게
    + ease-in : 느리게 - 빠르게
    + ease-out : 빠르게 - 느리게
    + ease-in-out : 느리게 - 빠르게 - 느리게
    + cubic-bezier(n1, n2, n3, n4) : 사용자 설정값 (0 ~ 1)
    + step(n, j?) : n번 분할된 애니메이션

  - animation-iteration-count : 반복횟수, 1
  - animation-direction : 반복방향, normal
  - animation-fill-mode : 전후 상태, none
  - animation-play-state : 재생과 정지, running

*/

div.animation {
  width: 100%;
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
}

div.movement {
  width: 100px;
  height: 20px;
  margin: 1rem;
  background-color: darkorchid;

  animation-name: movement;
  animation-duration: 5s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-delay: 0.5s;

  // * animation-direction *

  // --> normal : 기본값 from (0%) 에서 to (100%) 방향으로 진행
  // --> reverse : to 에서 from 방향으로 진행
  // --> alternate : 홀수번째는 normal, 짝수번째는 reverse로 진행
  animation-direction: alternate;
}

@keyframes movement {
  from {
    transform: translateX(0);
    opacity: 1;
  }

  to {
    transform: translateX(calc(100vw - 250px - 4rem));
    opacity: 0;
  }
}

.ani-4 {
  width: 80px;
  height: 80px;
  border: 8px solid #e96900;
  border-top-color: transparent;
  border-radius: 50%;
  box-sizing: border-box;

  animation-name: loading;
  animation-duration: 1s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes loading {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.ani-3 {
  width: 100px;
  height: 50px;
  background-color: #ea4335;
  margin: 1rem;
  border-radius: 0.5rem;
  cursor: pointer;

  &:hover {
    animation-name: ani-3;
    animation-delay: 0.5s;
    animation-duration: 2s;
    animation-fill-mode: forwards;
  }
}

@keyframes ani-3 {
  0% {
    transform: translateX(100px) rotate(0deg);
  }
  50% {
    transform: translateX(300px) rotate(720deg);
  }
  75% {
    transform: translateX(500px) rotate(720deg);
  }
  100% {
    transform: translateX(500px) rotate(720deg);
  }
}

.ani-2 {
  width: 150px;
  height: 20px;
  background-color: #07bdfa;
  border-radius: 0.25rem;
  margin: 1rem;
  cursor: pointer;
  &:hover {
    animation-name: steps;
    animation-duration: 1s;
    animation-delay: 0.3s;
    animation-timing-function: steps(5);
    animation-iteration-count: infinite;
  }
}

@keyframes steps {
  0% {
    transform: translateX(0px);
  }
  100% {
    transform: translateX(500px);
  }
}

.ani-1 {
  width: 100px;
  height: 100px;
  cursor: pointer;
  background-color: darkcyan;
  margin: 1rem;
  &:hover {
    animation-name: ani-1;
    animation-duration: 2s;
    animation-delay: 0.5s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: alternate;
  }
}

@keyframes ani-1 {
  0% {
    width: 100px;
    height: 100px;
  }
  50% {
    width: 300px;
    height: 300px;
  }

  100% {
    width: 100px;
    height: 100px;
  }
}

// @debug math.pow(10, 3);
// @debug math.div(1, 3);
// @debug math.sqrt(2);
// @debug math.$e;
// @debug math.$max-number;
// @debug math.$max-safe-integer;
// @debug math.$min-number;
// @debug math.$min-safe-integer;
// @debug math.$pi;
// @debug math.ceil(5.234);
// @debug math.clamp(1, -1, 0);
// @debug math.min(1, 2, 3, 4, 5);
// @debug math.round(4.67);
// @debug math.hypot(3, 4);

// @if $theme-color == null {
//   @error "Theme Color must be defined!";
// }

// @debug $theme-color;

// @debug list.index(1px solid red, solid);
// @debug list.append(10px, 20px, $separator: comma);

// @debug list.length(
//   (
//     width: 10px,
//     height: 20px,
//   )
// );
