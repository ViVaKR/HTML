html,
body {
  margin: 0;
  padding: 0;
  box-sizing: border-box; /*--> box-sizing 속성을 border-box로 설정합니다. */
  height: 100dvh;
  width: 100%;
}

/* ? [ 매우 중요]
--> box-sizing 주요 차이점 이해하기
`box-sizing` 속성은 CSS에서 요소의 너비와 높이를 계산하는 방식을 지정합니다.

! 기본값 !
--> `content-box`이지만,
--> `border-box`를 사용하면 요소의 전체 크기를 예측하기 쉽게 만들 수 있습니다.

- **`box-sizing: content-box;`** (기본값)
  - 설정된 `width`와 `height`는 콘텐츠 영역의 크기를 지정합니다.
  - 패딩(`padding`)과 테두리(`border`)는 설정한 크기에 추가적으로 더해집니다.
  - 결과적으로 요소의 실제 크기는 `width + padding + border`가 됩니다.

- **`box-sizing: border-box;`**
  - 설정된 `width`와 `height`가 콘텐츠, 패딩, 테두리를 모두 포함한 요소의 전체 크기를 지정합니다.
  - 패딩과 테두리는 콘텐츠 영역을 줄여서 요소의 전체 크기를 유지합니다.
  - 요소의 실제 크기는 설정한 `width`와 `height`와 동일합니다.


- `.box1`의 실제 너비는 `200px (콘텐츠 너비) + 40px (패딩 좌우) + 20px (테두리 좌우) = 260px`이 됩니다.
- `.box2`의 실제 너비는 설정한 `200px`에 맞춰지고, 패딩과 테두리로 인해 콘텐츠 영역이 줄어듭니다.

! **요약:** !

--> `box-sizing: border-box;`를 사용하면 요소의 전체 크기에 패딩과 테두리가 포함되어 레이아웃을 설계할 때 편리합니다.
-->  레이아웃이 예상치 않게 흐트러지는 것을 방지하고, 요소의 크기를 보다 직관적으로 관리할 수 있습니다.

*/
.container {
  width: 100%;
  height: 100%;
  display: grid;
  padding: 0;
  grid-template-columns: repeat(4, 100px);
  grid-template-rows: repeat(6, 50px);
  gap: 0.8rem;
  background-color: skyblue;
  justify-content: center;
  align-items: center;
  position: relative;
}

/* 필요할 때 격자 무늬 활성화하기 파트 */
/* .container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: linear-gradient(to right, white 1px, transparent 1px),
    linear-gradient(to bottom, white 1px, transparent 1px);
  background-size: 100px 50px;
  pointer-events: none;
} */

.container .box {
  width: 100px;
  height: 100px;
  justify-self: center;
}

.container .box:nth-child(1) {
  grid-row: 1 / span 6;
  background-color: rgb(186, 19, 19);
  align-self: center;
}

.container .box:nth-child(2) {
  background-color: rgb(55, 55, 187);
  grid-row: 1 / span 3;
  align-self: flex-end;
}

.container .box:nth-child(3) {
  background-color: rgb(0, 255, 8);
  grid-row: 4 / span 3;
  align-self: flex-start;
}

.container .box:nth-child(4) {
  background-color: rgb(255, 0, 255);
  grid-row: 1 / span 2;
  align-self: end;
}

.container .box:nth-child(5) {
  background-color: rgb(255, 115, 0);
  grid-row: 3 / span 4;
  align-self: flex-start;
}
.container .box:nth-child(6) {
  background-color: rgb(23, 131, 131);
  grid-row: 2 / span 2;
}
