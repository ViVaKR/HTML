@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Cute+Font&display=swap');

@import url('global.scss');

// * {
//   margin: 0;
//   padding: 0;
//   box-sizing: border-box;
// }

// html {
//   width: 100%;
//   height: 100%;
// }

.container {
  margin: 0;
  padding: 0.3rem;
  background-color: rgb(233, 211, 183, 0.3);
}

h1 {
  font-size: 3rem;
}

hr {
  margin: 1.5rem;
}

/*
  ! font !

  selector {
    font: font-style font-variant-css2 font-weight font-width-css3 font-size / line-height font-family system-family-name
  }

  - font-style
  - font-variant
  - font-weight
  - font-stretch
  - font-size
  - line-height
  - font-family

  * 필수 속성
  - font-size
  - font-family


  * 시스템 글꼴
  - message-box : 메시지 박스 텍스트로 대화 상자에 사용되는 시스템 글꼴
  - small-caption : 작은 캡션 텍스트로 작은 컨트롤에 레이블을 지정하는 데 사용되는 시스템 글꼴
  - status-bar : 상태 바 텍스트로 창 상태 표시줄에 사용되는 글꼴
  - menu : 메뉴목록 및 드롭다운 메뉴 에 사용
  - icon : 아이콘에 레이블을 지정하는데 사용
  - caption : 갭션 텍스트로 캡션이 있는 컨트롤 버튼, 드롭다운 등에 사용되는 글꼴

  * 애니메이션
  - font-weight
  - font-stretch
  - font-size
  - line-height


*/

p.font-demo {
  // font: icon;
  // font: small-caption;
  // font: caption;
  // font: status-bar;
  // font: 'Roboto' 'Cute Font', sans-serif;
  // font-size font-family
  font: 1.4em '', sans-serif;
  cursor: progress;

  &:hover {
    font-style: oblique;
    color: darkgreen;
  }

  // font: small-caps bold 18px/1.4 sans-serif;
  // font: message-box;
}

/*
  --> [ grid, 그리드 ] <--
  - Grid Container
  - Grid Item
  - Grid Track
  - Grid Cell
  - Grid Line
  - Grid Number
  - Grid Gap
  - Grid Area

  ? fr (fraction) : 비율, 공간비율, 단편, 부분, 나누기, 파편, 분수
  * ex) 1fr 1fr 1fr : 균일하게 1:1:1 비율로 3개의 column 을 만들겠다는 의미
  * ex) 100px 2fr 1fr : 첫번째 열을 100px 로 고정, 나머지는 2:1의 비율로 만듦

  - grid-template-columns: repeat(5, 1fr);
  ? == gird-template-columns: 1fr 1fr 1fr 1fr 1fr;
  * repeat(반복횟수, 반복값)

  - grid-template-columns: repeat(3, minmax(100px, auto));
  * minmax(100px, auto) : 최소한 100px, 최대는 자동으로 맞춤

  - row-gap
  - column-gap
  - gap

  ? 각 셀의 영역 지정 하기 ?
  - grid-column-start
  - grid-column-end
  - grid-column
  - grid-row-start
  - grid-row-end
  - grid-row

  ? 정렬 ?
  ** 컨테이너에서 **
  - align-items : 모든 그리드 아이템을 세로축으로 셀의 중양에 정렬
    + align-self 값을 그룹으로 설정 함
  - justify-items : 모든 그리드 아이템을 가로축으로 셀의 중앙에 정렬
  - place-item: <align-item> <justify-item>
  * 그리드 아이템이 그리드 셀보다 작고 그 아이템을 셀안에서 중앙 정렬하고 싶을때 유용함
  * 셀과 아이템 사이에 공간이 있어야 함.

  ** 그리드 아이템에서 **
  - align-self : 세로방향의 아이템 배치
  - justify-self : 가로 방향의 아이템 배치
  - place-self: <align-self> <justify-self>

  * align-items : 수직 정렬 (열 축)
  * justify-content : 수평 정렬 (행 축)
  * place-content : <align> <justify>
  - normal
  - start
  - center
  - end
  - space-around : 각 열 좌우의 여백을 고르게 정렬
  - space-between : 첫열은 시작점에 끝저은 끝점에 정렬되고 나머지는 여백으로 고르게 정렬함
  - space-evenly : 모든 여백을 고르게 정렬
  - stretch : 행축을 채우기 위해 그리드 콘텐츠를 늘림

*/

div.grid-container-7 {
  width: 500px;
  height: 500px;
  margin: 0.5rem;
  background-color: rgb(210, 232, 168);
  display: grid;
  grid-template-rows: [row-1] 1fr [row-2] 1fr [row-3];
  grid-template-columns: [col-1] 1fr [col-2] 1fr [col-3] 1fr [col-4];

  .item:nth-child(1) {
    background-color: blueviolet;
    grid-row-start: row-2;
    grid-row-end: row-3;
    grid-column-start: col-2;
    grid-column-end: col-4;
    display: flex;

    /*
      ? flex-wrap ?
      - nowrap : 기본값
      - wrap : 여유가 없으면 다음 줄로 넘김 -> ?-content 작동함
      - wrap-reverse : ... 아래가 아닌 위로 넘김
    */
    flex-wrap: wrap;
    place-content: center;
  }
}
div.grid-container-6 {
  width: 500px;
  height: 500px;
  margin: 0.5rem;
  display: grid;
  grid: repeat(2, 1fr) / repeat(3, 1fr);

  background-color: yellowgreen;

  .item {
    background-color: blueviolet;
  }
  .item:nth-child(1) {
    grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 4;
  }
}

div.grid-container-5 {
  width: 500px;
  height: 500px;
  display: grid;
  gap: 10px;
  // grid-template-columns: repeat(3, 1fr);
  // grid-template-rows: repeat(3, 1fr);
  grid: repeat(3, 1fr) / repeat(3, 1fr);

  // 어떤 방식으로 '자동 배치 알고리즘'으로 처리할지 정의함.
  grid-auto-flow: row dense;

  .item {
    width: 100px;
    height: 100px;
    background-color: #4caf50;

    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-content: center;
    font-size: 2em;
    color: white;
  }

  .item:nth-child(2) {
    grid-column: span 3;
    width: calc(500px - 1rem);
  }
}

div.grid-container-4 {
  width: 300px;
  height: auto;
  margin: 3rem;
  display: grid;
  grid-template-rows: 100px 100px;
  grid-template-columns: 150px 150px;
  gap: 0.5em;

  grid-auto-rows: 100px;
  grid-auto-columns: 100px;

  .item {
    background-color: darkorchid;
    font-size: 2em;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    border-radius: 1em;
  }
  .item:nth-child(3) {
    grid-row: 3/4;
    grid-column: 3/4;
  }
}

div.grid-container-3 {
  display: grid;

  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-template-rows: repeat(3, 200px);
  gap: 1em;

  // align-items: center;
  // justify-items: center;
  // * 위 두줄을 아래와 같이 한줄로 작성 가능
  place-items: center center;

  .grid-item {
    width: 50px;
    height: 50px;
    background-color: rgb(60, 204, 240);
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 0.5em;
  }

  .grid-item:nth-child(5) {
    background-color: rgb(175, 72, 72);
    align-self: flex-start;
    justify-self: end;

    /*


    */
  }
}

div.grid-container-2 {
  height: 50svh;
  display: grid;
  grid-template-columns: repeat(3, minmax(100px, auto));
  grid-auto-rows: minmax(100px, auto);
  gap: 10px;

  .grid-item {
    background-color: #4caf50;
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

div.grid-container {
  min-height: 100svh;
  display: grid;
  grid-template-columns: minmax(200px, 2fr) 6fr minmax(100px, 1fr);
  grid-template-rows: 50px 1fr 100px;
  gap: 0.3em; // row-gap (2em), column-gap (1em)

  grid-template-areas:
    'header header header'
    'sidebar-left main sidebar-right'
    'footer footer footer';

  .grid-item {
    background-color: rgb(4, 138, 138, 0.3);
    color: white;
  }
}

// 최대 너비가 768px 인 화면까지에 대한 CSS 규칙
@media screen and (max-width: 768px) {
  div.grid-container {
    min-height: 100svh;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows:
      50px
      minmax(50px, auto)
      1fr
      minmax(50px, auto)
      100px; /* footer */

    gap: 0.3em; // row-gap (2em), column-gap (1em)

    grid-template-areas:
      'header'
      'sidebar-left'
      'main'
      'sidebar-right'
      'footer';

    .grid-item {
      background-color: rgb(4, 138, 138, 0.3);
      color: white;
    }
  }
}

.header {
  grid-area: header;
}
.sidebar-left {
  grid-area: sidebar-left;
}
.main {
  grid-area: main;
}
.sidebar-right {
  grid-area: sidebar-right;
}
.footer {
  grid-area: footer;
}

div.img-box {
  display: grid;
  grid-template-columns: repeat(3, minmax(200px, 1fr));
  grid-auto-rows: minmax(200px, auto);
  gap: 3rem;
  justify-items: center;

  img {
    border-radius: 1em;
  }
}

// filter
img.robot-man1 {
  filter: blur(5px);
}

img.robot-man2 {
  filter: grayscale(100%);
}

img.robot-man3 {
  filter: sepia(80%);
}

img.robot-man4 {
  filter: invert(75%);
}

img.robot-man5 {
  filter: drop-shadow(4px 4px 10px blue);
}

/*
  --> grid
*/

.grid-container {
  display: grid;
  grid-template-columns: repeat(3, auto);
  border: 2px solid #333;
  padding: 10px;
  gap: 10px;
  .grid-item {
    background-color: #4caf50;
    color: white;
    padding: 10px;
  }
}

/*
  --> display

  block : 크기지정이 되며, 줄바꿈이 일어남
  inline : 크기지정이 안되며, 줄바꿈도 일어나지 않음, 다만 input button 등은 너비와 높이 지정 가능
  inline-block : 크기지정 가능, 줄바꿈 없음
  flex
  inline-flex
  grid
  inline-grid
  flow-root
  table
  list-item

  none
  contents

  table-row
  table-cell
  table-caption

  block flex
  block grid
  inline flex
  inline grid

  inherit
  initial
  unset
  revert
  revert-layer


*/

ul.cursor-types {
  margin: 0.7em 0;
  padding: 0;
  list-style-type: none;
  li {
    width: 200px;
    padding: 0.5em 0.7em;
    border-radius: 5px;
    margin-bottom: 0.7em;
    transition: all 0.2s;
    border: 1px solid black;
    color: black !important;
    &:hover {
      color: red !important;
      border: 1px solid red !important;
      box-shadow: 0 1px 1px red;
    }
  }
}
// caret-color

/*
  --> box-sizing
  * content-box : 콘텐츠 영역
  * padding
  * border
  * border-box : 콘텐츠 + 패딩 + 테두리
  * margin
*/
div.box-shadow-1 {
  width: 480px;
  height: 120px;
  border-radius: 0.5em;
  background-color: skyblue;
  border: 5px solid darkcyan;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2em;
  box-shadow: 10px 15px 7px -5px magenta; //
}

div.rect-2 {
  width: 200px;
  aspect-ratio: 1;

  background-color: skyblue;
  border: 5px solid darkcyan;
  border-radius: 60px / 40px; // 타원형
}

div.rect-1 {
  width: 200px;
  aspect-ratio: 1;

  background-color: skyblue;
  border: 5px solid darkcyan;
  border-radius: 20px 70px; // 좌상, 우상, 우하, 좌하 (시계방향)
}

div.bg-layer {
  width: 100%;
  aspect-ratio: 1;
  background: url('assets/robot-man.webp') no-repeat center center / cover;
  display: flex;
  justify-content: center;
  align-items: center;

  .front-text {
    width: 50%;
    aspect-ratio: 3/1;
    border: 3px solid white;
    border-radius: 1rem;
    background-color: transparent;
    backdrop-filter: brightness(50%);
    // backdrop-filter: grayscale(100%);
    // backdrop-filter: blur(4px) sepia(80%);
    // backdrop-filter: blur(4px);
    color: white;
    font-size: 3rem;
    display: flex;
    padding: 0;
    margin: 0;
    justify-content: center;
    align-items: center;
  }
}

div[id='bg-1'] {
  width: 100%;
  height: 200px;
  background: url('assets/robot-man.webp') no-repeat center center / cover;
}

input[id='chk'] {
  accent-color: red;
}

select[id='select1'] {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 300px;
  padding: 0.8em 1.5em;
  border: none;

  // background-image: url('assets/male_default.png');
  // background-repeat: no-repeat;
  // background-position: 96% center; /* x-pos, y-pos */
  // background-size: 1rem;

  /*
    * cover : 가로세로 비율을 유지 하면서 요소를 채울때까지 확대/축소
    * contain : 가로 세로 비율을 지지 유지하면서 요소를 벗어나지 않는 최대 크기로 확대/축소, 빈공간이 생길 수 있음
    * initial : 기본값으로 설정
    * inherit : 부모 요소의 속성값 상속
    * auto : 기본값, 이지지 크기 유지
  */

  // --> background: url('../path/to/image') no-repeat x-pos y-pos / size:
  background: url('assets/male_default.png') no-repeat 96% center / 1rem;
}

#box1 {
  background-color: orange;
  width: 200px;
  /*
    height 가 지정되지 않았을 경우
    height 는 auto 입니다.
    - 반드시 width, height 중 하난는 auto 여야 aspect-ratio 가 정상 작동함.
    - align-items: stretch 를 적용받는 요소일 경우 작동하지 않음.
    - 백분율 단위 값ㅇ르 사용할 경우 작동안됨.
  */
  aspect-ratio: 1; // 1/1 과 동일
  margin: 10px;
}
section p:nth-of-type(2) {
  background-color: yellowgreen;
}

section div:nth-of-type(2) {
  background-color: orange;
}

#nth-childs > li:nth-child(2n + 1) {
  color: rgba(255, 0, 255, 0.3);
}

#list1 > li:first-child {
  color: maroon;
}

#list1 > li:last-child {
  background-color: maroon;
  color: white;
}

:lang(ko) {
  background-color: #333;
  color: white;
}
/*

* 자손 선택자 (자식, 자식의자식, 자식의 자식의 자식..등 깊이에 무관): 선택자1 선택자2
* 자식 선택자 (직계 자식만 선택): 선택자1 > 선택자2
* 이후 모든 형제 선택자, 선택자1은 제외 : 선택자1 ~ 선택자2
* 다음 형제 선택자, 선택자1은 제외 : 선택자1 + 선택자2

*/

p#first1 ~ p {
  color: red;
}

p#first1 + p {
  color: green;
}

// :has()
h4:has(+ p) {
  background-color: rgb(16, 114, 163);
  color: white;
  padding: 0.5em;
}

// :not()
li:not(.not-bg1, .not-bg2, #list1 > li, #nth-childs > li) {
  color: rgb(255, 0, 195);
}

// :is(h4, p)
// :where(h4, p)
// h4 와 p 요소의 배경색을 선택합니다.
// is 는 우선순위가 높고, where 는 없음

fieldset {
  padding: 1em;
  box-sizing: border-box;
  border-radius: 0.5em;
  &:focus-within {
    background-color: gold;
  }
}

// :focus
// 포커스란?
// 요소가 키보드 입력이나 상호작용을 받을 준비가 된 상태를 의미함
// 주로 사용자가 탭키나 클릭을 통해 요소에 접근했을 때 발생함.
input#user-name {
  box-sizing: border-box;
  width: auto;

  padding: 0.8em 1.5em;

  border: 1px solid gray;

  border-radius: 0.5em;

  font-size: 1rem;

  &:focus {
    background-color: rgba(0, 255, 255, 0.3);
  }
}

// :link
// 브라우저의 방문 기록을 기준으로 아직 방문하지 않은 링크를 선택함.

a:link {
  color: rgba(255, 0, 255, 0.6);
}

// :visited
// 이미 방문한 링크를 선택함
a:visited {
  color: rgb(7, 97, 7);
}

a {
  text-decoration: none;
}
// ::backdrop
// 최상위 레이어는 자바스크립트로 렌더링될 떼에만 자동으로 생성됨
dialog::backdrop {
  background-color: rgba(255, 0, 255, 0.3);
}

dialog {
  width: 380px;
  font-size: 2em;
}

button {
  padding: 0.8em 1.5em;
  border: none;
  border-radius: 0.5em;
  cursor: pointer;

  &:hover {
    background-color: rgba(255, 0, 255, 0.3);
  }

  // 마우스 커서를 올려놓고 누르는 순간 붙터 떼는 시점 까지
  &:active {
    background-color: orange;
  }
}

/*
  ! 배치 순서
  :link
  :visited
  :hover
  :active

*/
// ::selection
p#selection1::selection {
  background-color: yellow;
  color: red;
  text-shadow: 2px 3px 4px gray;
}

p#korean1 {
  font-size: 1.5rem;
}

// placeholder
input#placeholder1 {
  font-size: 1.2em;
  padding: 0.5em;
}

input::placeholder {
  color: gray;
  font-size: 1.2em;
}

.post {
  container-type: inline-size;
  container-name: sidebar;
}

@container sidebar (width >=400px) {
  .card {
    color: red;
  }
}
